/*
 * Copyright 2015 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.linecorp.armeria.server.thrift;

import org.apache.thrift.protocol.TProtocolFactory;

import com.linecorp.armeria.common.SerializationFormat;
import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
import com.linecorp.armeria.server.Service;
import com.linecorp.armeria.server.SimpleService;

/**
 * A {@link Service} that handles a Thrift call.
 *
 * @see ThriftProtocolFactories
 */
public class ThriftService extends SimpleService {

    /**
     * Creates a new instance with the specified service implementation and the
     * {@link ThriftProtocolFactories#BINARY TBinary} protocol.
     *
     * @param thriftService an implementation of {@code *.Iface} or {@code *.AsyncIface} service interface
     *                      generated by the Apache Thrift compiler
     */
    public ThriftService(Object thriftService) {
        this(thriftService, ThriftProtocolFactories.BINARY);
    }

    /**
     * Creates a new instance with the specified service implementation and the specified
     * {@link TProtocolFactory}.
     *
     * @param thriftService an implementation of {@code *.Iface} or {@code *.AsyncIface} service interface
     *                      generated by the  Apache Thrift compiler
     */
    public ThriftService(Object thriftService, TProtocolFactory protoFactory) {
        super(new ThriftServiceCodec(thriftService, protoFactory),
              new ThriftServiceInvocationHandler(thriftService));
    }

    /**
     * Returns the Thrift service object that implements {@code *.Iface} or {@code *.AsyncIface}.
     */
    public Object thriftService() {
        return ((ThriftServiceCodec) codec()).thriftService();
    }

    /**
     * Returns the serialization format used when registering this Thrift service.
     */
    public SerializationFormat serializationFormat() {
        return ((ThriftServiceCodec) codec()).serializationFormat();
    }
}
